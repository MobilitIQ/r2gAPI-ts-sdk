"use strict";
// tslint:disable
/**
 * Ride2Go API
 * Ride2Go Ridesharing API.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var globalImportUrl = require("url");
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("./base");
/**
 * @export
 * @enum {string}
 */
var ParticipationDtoRoleEnum;
(function (ParticipationDtoRoleEnum) {
    ParticipationDtoRoleEnum["DRIVER"] = "DRIVER";
    ParticipationDtoRoleEnum["OPERATOR"] = "OPERATOR";
    ParticipationDtoRoleEnum["PASSENGER"] = "PASSENGER";
})(ParticipationDtoRoleEnum = exports.ParticipationDtoRoleEnum || (exports.ParticipationDtoRoleEnum = {}));
/**
 * @export
 * @enum {string}
 */
var ParticipationDtoStatusEnum;
(function (ParticipationDtoStatusEnum) {
    ParticipationDtoStatusEnum["ACCEPTED"] = "ACCEPTED";
    ParticipationDtoStatusEnum["REQUESTED"] = "REQUESTED";
    ParticipationDtoStatusEnum["REJECTED"] = "REJECTED";
})(ParticipationDtoStatusEnum = exports.ParticipationDtoStatusEnum || (exports.ParticipationDtoStatusEnum = {}));
/**
 * @export
 * @enum {string}
 */
var PersonaGenderEnum;
(function (PersonaGenderEnum) {
    PersonaGenderEnum["MAN"] = "MAN";
    PersonaGenderEnum["WOMAN"] = "WOMAN";
    PersonaGenderEnum["G"] = "G";
})(PersonaGenderEnum = exports.PersonaGenderEnum || (exports.PersonaGenderEnum = {}));
/**
 * @export
 * @enum {string}
 */
var PersonaDtoGenderEnum;
(function (PersonaDtoGenderEnum) {
    PersonaDtoGenderEnum["MAN"] = "MAN";
    PersonaDtoGenderEnum["WOMAN"] = "WOMAN";
    PersonaDtoGenderEnum["G"] = "G";
})(PersonaDtoGenderEnum = exports.PersonaDtoGenderEnum || (exports.PersonaDtoGenderEnum = {}));
/**
 * @export
 * @enum {string}
 */
var ScheduleDtoByDayEnum;
(function (ScheduleDtoByDayEnum) {
    ScheduleDtoByDayEnum["MONDAY"] = "MONDAY";
    ScheduleDtoByDayEnum["TUESDAY"] = "TUESDAY";
    ScheduleDtoByDayEnum["WEDNESDAY"] = "WEDNESDAY";
    ScheduleDtoByDayEnum["THURSDAY"] = "THURSDAY";
    ScheduleDtoByDayEnum["FRIDAY"] = "FRIDAY";
    ScheduleDtoByDayEnum["SATURDAY"] = "SATURDAY";
    ScheduleDtoByDayEnum["SUNDAY"] = "SUNDAY";
})(ScheduleDtoByDayEnum = exports.ScheduleDtoByDayEnum || (exports.ScheduleDtoByDayEnum = {}));
/**
 * @export
 * @enum {string}
 */
var ScheduleDtoByMonthEnum;
(function (ScheduleDtoByMonthEnum) {
    ScheduleDtoByMonthEnum["JANUARY"] = "JANUARY";
    ScheduleDtoByMonthEnum["FEBRUARY"] = "FEBRUARY";
    ScheduleDtoByMonthEnum["MARCH"] = "MARCH";
    ScheduleDtoByMonthEnum["APRIL"] = "APRIL";
    ScheduleDtoByMonthEnum["MAY"] = "MAY";
    ScheduleDtoByMonthEnum["JUNE"] = "JUNE";
    ScheduleDtoByMonthEnum["JULY"] = "JULY";
    ScheduleDtoByMonthEnum["AUGUST"] = "AUGUST";
    ScheduleDtoByMonthEnum["SEPTEMBER"] = "SEPTEMBER";
    ScheduleDtoByMonthEnum["OCTOBER"] = "OCTOBER";
    ScheduleDtoByMonthEnum["NOVEMBER"] = "NOVEMBER";
    ScheduleDtoByMonthEnum["DECEMBER"] = "DECEMBER";
})(ScheduleDtoByMonthEnum = exports.ScheduleDtoByMonthEnum || (exports.ScheduleDtoByMonthEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SearchDtoTripTypesEnum;
(function (SearchDtoTripTypesEnum) {
    SearchDtoTripTypesEnum["OFFER"] = "OFFER";
    SearchDtoTripTypesEnum["SEARCH"] = "SEARCH";
})(SearchDtoTripTypesEnum = exports.SearchDtoTripTypesEnum || (exports.SearchDtoTripTypesEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SearchDtoReoccurDaysEnum;
(function (SearchDtoReoccurDaysEnum) {
    SearchDtoReoccurDaysEnum["MONDAY"] = "MONDAY";
    SearchDtoReoccurDaysEnum["TUESDAY"] = "TUESDAY";
    SearchDtoReoccurDaysEnum["WEDNESDAY"] = "WEDNESDAY";
    SearchDtoReoccurDaysEnum["THURSDAY"] = "THURSDAY";
    SearchDtoReoccurDaysEnum["FRIDAY"] = "FRIDAY";
    SearchDtoReoccurDaysEnum["SATURDAY"] = "SATURDAY";
    SearchDtoReoccurDaysEnum["SUNDAY"] = "SUNDAY";
})(SearchDtoReoccurDaysEnum = exports.SearchDtoReoccurDaysEnum || (exports.SearchDtoReoccurDaysEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SearchDtoSmokingEnum;
(function (SearchDtoSmokingEnum) {
    SearchDtoSmokingEnum["YES"] = "YES";
    SearchDtoSmokingEnum["NO"] = "NO";
    SearchDtoSmokingEnum["ASK"] = "ASK";
    SearchDtoSmokingEnum["IRRELEVANT"] = "IRRELEVANT";
})(SearchDtoSmokingEnum = exports.SearchDtoSmokingEnum || (exports.SearchDtoSmokingEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SearchDtoAnimalsEnum;
(function (SearchDtoAnimalsEnum) {
    SearchDtoAnimalsEnum["YES"] = "YES";
    SearchDtoAnimalsEnum["NO"] = "NO";
    SearchDtoAnimalsEnum["ASK"] = "ASK";
    SearchDtoAnimalsEnum["IRRELEVANT"] = "IRRELEVANT";
})(SearchDtoAnimalsEnum = exports.SearchDtoAnimalsEnum || (exports.SearchDtoAnimalsEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SearchDtoTransportTypesEnum;
(function (SearchDtoTransportTypesEnum) {
    SearchDtoTransportTypesEnum["CAR"] = "CAR";
    SearchDtoTransportTypesEnum["PLANE"] = "PLANE";
    SearchDtoTransportTypesEnum["BOAT"] = "BOAT";
    SearchDtoTransportTypesEnum["TRAIN"] = "TRAIN";
})(SearchDtoTransportTypesEnum = exports.SearchDtoTransportTypesEnum || (exports.SearchDtoTransportTypesEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SearchDtoBaggageEnum;
(function (SearchDtoBaggageEnum) {
    SearchDtoBaggageEnum["SMALL"] = "SMALL";
    SearchDtoBaggageEnum["MEDIUM"] = "MEDIUM";
    SearchDtoBaggageEnum["LARGE"] = "LARGE";
    SearchDtoBaggageEnum["HUGE"] = "HUGE";
})(SearchDtoBaggageEnum = exports.SearchDtoBaggageEnum || (exports.SearchDtoBaggageEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SearchDtoGenderEnum;
(function (SearchDtoGenderEnum) {
    SearchDtoGenderEnum["MAN"] = "MAN";
    SearchDtoGenderEnum["WOMAN"] = "WOMAN";
    SearchDtoGenderEnum["IRRELEVANT"] = "IRRELEVANT";
})(SearchDtoGenderEnum = exports.SearchDtoGenderEnum || (exports.SearchDtoGenderEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SearchDtoOrganizationsEnum;
(function (SearchDtoOrganizationsEnum) {
    SearchDtoOrganizationsEnum["ADAC"] = "ADAC";
    SearchDtoOrganizationsEnum["ACA"] = "ACA";
    SearchDtoOrganizationsEnum["ACL"] = "ACL";
    SearchDtoOrganizationsEnum["TCS"] = "TCS";
    SearchDtoOrganizationsEnum["TOURING"] = "TOURING";
})(SearchDtoOrganizationsEnum = exports.SearchDtoOrganizationsEnum || (exports.SearchDtoOrganizationsEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TransportDtoTransportTypeEnum;
(function (TransportDtoTransportTypeEnum) {
    TransportDtoTransportTypeEnum["CAR"] = "CAR";
    TransportDtoTransportTypeEnum["PLANE"] = "PLANE";
    TransportDtoTransportTypeEnum["BOAT"] = "BOAT";
    TransportDtoTransportTypeEnum["TRAIN"] = "TRAIN";
})(TransportDtoTransportTypeEnum = exports.TransportDtoTransportTypeEnum || (exports.TransportDtoTransportTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TransportDtoCargoVolumeEnum;
(function (TransportDtoCargoVolumeEnum) {
    TransportDtoCargoVolumeEnum["SMALL"] = "SMALL";
    TransportDtoCargoVolumeEnum["MEDIUM"] = "MEDIUM";
    TransportDtoCargoVolumeEnum["LARGE"] = "LARGE";
    TransportDtoCargoVolumeEnum["HUGE"] = "HUGE";
})(TransportDtoCargoVolumeEnum = exports.TransportDtoCargoVolumeEnum || (exports.TransportDtoCargoVolumeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TripDtoSmokingEnum;
(function (TripDtoSmokingEnum) {
    TripDtoSmokingEnum["YES"] = "YES";
    TripDtoSmokingEnum["NO"] = "NO";
    TripDtoSmokingEnum["FLEX"] = "FLEX";
})(TripDtoSmokingEnum = exports.TripDtoSmokingEnum || (exports.TripDtoSmokingEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TripDtoAnimalsEnum;
(function (TripDtoAnimalsEnum) {
    TripDtoAnimalsEnum["YES"] = "YES";
    TripDtoAnimalsEnum["NO"] = "NO";
    TripDtoAnimalsEnum["ASK"] = "ASK";
})(TripDtoAnimalsEnum = exports.TripDtoAnimalsEnum || (exports.TripDtoAnimalsEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UserSearchGenderEnum;
(function (UserSearchGenderEnum) {
    UserSearchGenderEnum["MAN"] = "MAN";
    UserSearchGenderEnum["WOMAN"] = "WOMAN";
    UserSearchGenderEnum["IRRELEVANT"] = "IRRELEVANT";
})(UserSearchGenderEnum = exports.UserSearchGenderEnum || (exports.UserSearchGenderEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UserSearchIsSingleEnum;
(function (UserSearchIsSingleEnum) {
    UserSearchIsSingleEnum["YES"] = "YES";
    UserSearchIsSingleEnum["NO"] = "NO";
    UserSearchIsSingleEnum["IRRELEVANT"] = "IRRELEVANT";
})(UserSearchIsSingleEnum = exports.UserSearchIsSingleEnum || (exports.UserSearchIsSingleEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UserSearchHasAvatarEnum;
(function (UserSearchHasAvatarEnum) {
    UserSearchHasAvatarEnum["YES"] = "YES";
    UserSearchHasAvatarEnum["NO"] = "NO";
    UserSearchHasAvatarEnum["IRRELEVANT"] = "IRRELEVANT";
})(UserSearchHasAvatarEnum = exports.UserSearchHasAvatarEnum || (exports.UserSearchHasAvatarEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UserSearchIsOnlineEnum;
(function (UserSearchIsOnlineEnum) {
    UserSearchIsOnlineEnum["YES"] = "YES";
    UserSearchIsOnlineEnum["NO"] = "NO";
    UserSearchIsOnlineEnum["IRRELEVANT"] = "IRRELEVANT";
})(UserSearchIsOnlineEnum = exports.UserSearchIsOnlineEnum || (exports.UserSearchIsOnlineEnum = {}));
/**
 * DemandsApi - axios parameter creator
 * @export
 */
exports.DemandsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create an Deman
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: function (demandDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'demandDto' is not null or undefined
            if (demandDto === null || demandDto === undefined) {
                throw new base_1.RequiredError('demandDto', 'Required parameter demandDto was null or undefined when calling create2.');
            }
            var localVarPath = "/demand/";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof demandDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(demandDto !== undefined ? demandDto : {}) : (demandDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Delete an Offer
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: function (demandDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'demandDto' is not null or undefined
            if (demandDto === null || demandDto === undefined) {
                throw new base_1.RequiredError('demandDto', 'Required parameter demandDto was null or undefined when calling delete2.');
            }
            var localVarPath = "/demand/";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof demandDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(demandDto !== undefined ? demandDto : {}) : (demandDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById2: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deleteById2.');
            }
            var localVarPath = "/demand/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById4: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getById4.');
            }
            var localVarPath = "/demand/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Demand searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search4: function (searchDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'searchDto' is not null or undefined
            if (searchDto === null || searchDto === undefined) {
                throw new base_1.RequiredError('searchDto', 'Required parameter searchDto was null or undefined when calling search4.');
            }
            var localVarPath = "/demand/search";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof searchDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(searchDto !== undefined ? searchDto : {}) : (searchDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Update an Offer
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: function (demandDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'demandDto' is not null or undefined
            if (demandDto === null || demandDto === undefined) {
                throw new base_1.RequiredError('demandDto', 'Required parameter demandDto was null or undefined when calling update2.');
            }
            var localVarPath = "/demand/";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof demandDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(demandDto !== undefined ? demandDto : {}) : (demandDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DemandsApi - functional programming interface
 * @export
 */
exports.DemandsApiFp = function (configuration) {
    return {
        /**
         * Create an Deman
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: function (demandDto, options) {
            var localVarAxiosArgs = exports.DemandsApiAxiosParamCreator(configuration).create2(demandDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an Offer
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: function (demandDto, options) {
            var localVarAxiosArgs = exports.DemandsApiAxiosParamCreator(configuration).delete2(demandDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById2: function (id, options) {
            var localVarAxiosArgs = exports.DemandsApiAxiosParamCreator(configuration).deleteById2(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById4: function (id, options) {
            var localVarAxiosArgs = exports.DemandsApiAxiosParamCreator(configuration).getById4(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Demand searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search4: function (searchDto, options) {
            var localVarAxiosArgs = exports.DemandsApiAxiosParamCreator(configuration).search4(searchDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an Offer
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: function (demandDto, options) {
            var localVarAxiosArgs = exports.DemandsApiAxiosParamCreator(configuration).update2(demandDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * DemandsApi - factory interface
 * @export
 */
exports.DemandsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create an Deman
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: function (demandDto, options) {
            return exports.DemandsApiFp(configuration).create2(demandDto, options)(axios, basePath);
        },
        /**
         * Delete an Offer
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: function (demandDto, options) {
            return exports.DemandsApiFp(configuration).delete2(demandDto, options)(axios, basePath);
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById2: function (id, options) {
            return exports.DemandsApiFp(configuration).deleteById2(id, options)(axios, basePath);
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById4: function (id, options) {
            return exports.DemandsApiFp(configuration).getById4(id, options)(axios, basePath);
        },
        /**
         * Demand searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search4: function (searchDto, options) {
            return exports.DemandsApiFp(configuration).search4(searchDto, options)(axios, basePath);
        },
        /**
         * Update an Offer
         * @param {DemandDto} demandDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: function (demandDto, options) {
            return exports.DemandsApiFp(configuration).update2(demandDto, options)(axios, basePath);
        }
    };
};
/**
 * DemandsApi - object-oriented interface
 * @export
 * @class DemandsApi
 * @extends {BaseAPI}
 */
var DemandsApi = /** @class */ (function (_super) {
    __extends(DemandsApi, _super);
    function DemandsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create an Deman
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    DemandsApi.prototype.create2 = function (demandDto, options) {
        return exports.DemandsApiFp(this.configuration).create2(demandDto, options)(this.axios, this.basePath);
    };
    /**
     * Delete an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    DemandsApi.prototype.delete2 = function (demandDto, options) {
        return exports.DemandsApiFp(this.configuration).delete2(demandDto, options)(this.axios, this.basePath);
    };
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    DemandsApi.prototype.deleteById2 = function (id, options) {
        return exports.DemandsApiFp(this.configuration).deleteById2(id, options)(this.axios, this.basePath);
    };
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    DemandsApi.prototype.getById4 = function (id, options) {
        return exports.DemandsApiFp(this.configuration).getById4(id, options)(this.axios, this.basePath);
    };
    /**
     * Demand searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    DemandsApi.prototype.search4 = function (searchDto, options) {
        return exports.DemandsApiFp(this.configuration).search4(searchDto, options)(this.axios, this.basePath);
    };
    /**
     * Update an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    DemandsApi.prototype.update2 = function (demandDto, options) {
        return exports.DemandsApiFp(this.configuration).update2(demandDto, options)(this.axios, this.basePath);
    };
    return DemandsApi;
}(base_1.BaseAPI));
exports.DemandsApi = DemandsApi;
/**
 * OffersApi - axios parameter creator
 * @export
 */
exports.OffersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (offerDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'offerDto' is not null or undefined
            if (offerDto === null || offerDto === undefined) {
                throw new base_1.RequiredError('offerDto', 'Required parameter offerDto was null or undefined when calling _delete.');
            }
            var localVarPath = "/offer/";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof offerDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(offerDto !== undefined ? offerDto : {}) : (offerDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Create an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (offerDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'offerDto' is not null or undefined
            if (offerDto === null || offerDto === undefined) {
                throw new base_1.RequiredError('offerDto', 'Required parameter offerDto was null or undefined when calling create.');
            }
            var localVarPath = "/offer/";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof offerDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(offerDto !== undefined ? offerDto : {}) : (offerDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deleteById.');
            }
            var localVarPath = "/offer/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Returns the offer with the given ID
         * @param {string} id ID of the offer to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getById.');
            }
            var localVarPath = "/offer/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Offer searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (searchDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'searchDto' is not null or undefined
            if (searchDto === null || searchDto === undefined) {
                throw new base_1.RequiredError('searchDto', 'Required parameter searchDto was null or undefined when calling search.');
            }
            var localVarPath = "/offer/search";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof searchDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(searchDto !== undefined ? searchDto : {}) : (searchDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Update an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: function (offerDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'offerDto' is not null or undefined
            if (offerDto === null || offerDto === undefined) {
                throw new base_1.RequiredError('offerDto', 'Required parameter offerDto was null or undefined when calling update.');
            }
            var localVarPath = "/offer/";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof offerDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(offerDto !== undefined ? offerDto : {}) : (offerDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * OffersApi - functional programming interface
 * @export
 */
exports.OffersApiFp = function (configuration) {
    return {
        /**
         * Delete an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (offerDto, options) {
            var localVarAxiosArgs = exports.OffersApiAxiosParamCreator(configuration)._delete(offerDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (offerDto, options) {
            var localVarAxiosArgs = exports.OffersApiAxiosParamCreator(configuration).create(offerDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: function (id, options) {
            var localVarAxiosArgs = exports.OffersApiAxiosParamCreator(configuration).deleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the offer with the given ID
         * @param {string} id ID of the offer to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: function (id, options) {
            var localVarAxiosArgs = exports.OffersApiAxiosParamCreator(configuration).getById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Offer searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (searchDto, options) {
            var localVarAxiosArgs = exports.OffersApiAxiosParamCreator(configuration).search(searchDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: function (offerDto, options) {
            var localVarAxiosArgs = exports.OffersApiAxiosParamCreator(configuration).update(offerDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * OffersApi - factory interface
 * @export
 */
exports.OffersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Delete an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (offerDto, options) {
            return exports.OffersApiFp(configuration)._delete(offerDto, options)(axios, basePath);
        },
        /**
         * Create an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (offerDto, options) {
            return exports.OffersApiFp(configuration).create(offerDto, options)(axios, basePath);
        },
        /**
         * Returns the demand with the given ID
         * @param {string} id ID of the demand to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: function (id, options) {
            return exports.OffersApiFp(configuration).deleteById(id, options)(axios, basePath);
        },
        /**
         * Returns the offer with the given ID
         * @param {string} id ID of the offer to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: function (id, options) {
            return exports.OffersApiFp(configuration).getById(id, options)(axios, basePath);
        },
        /**
         * Offer searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (searchDto, options) {
            return exports.OffersApiFp(configuration).search(searchDto, options)(axios, basePath);
        },
        /**
         * Update an Offer
         * @param {OfferDto} offerDto Offer Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: function (offerDto, options) {
            return exports.OffersApiFp(configuration).update(offerDto, options)(axios, basePath);
        }
    };
};
/**
 * OffersApi - object-oriented interface
 * @export
 * @class OffersApi
 * @extends {BaseAPI}
 */
var OffersApi = /** @class */ (function (_super) {
    __extends(OffersApi, _super);
    function OffersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    OffersApi.prototype._delete = function (offerDto, options) {
        return exports.OffersApiFp(this.configuration)._delete(offerDto, options)(this.axios, this.basePath);
    };
    /**
     * Create an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    OffersApi.prototype.create = function (offerDto, options) {
        return exports.OffersApiFp(this.configuration).create(offerDto, options)(this.axios, this.basePath);
    };
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    OffersApi.prototype.deleteById = function (id, options) {
        return exports.OffersApiFp(this.configuration).deleteById(id, options)(this.axios, this.basePath);
    };
    /**
     * Returns the offer with the given ID
     * @param {string} id ID of the offer to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    OffersApi.prototype.getById = function (id, options) {
        return exports.OffersApiFp(this.configuration).getById(id, options)(this.axios, this.basePath);
    };
    /**
     * Offer searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    OffersApi.prototype.search = function (searchDto, options) {
        return exports.OffersApiFp(this.configuration).search(searchDto, options)(this.axios, this.basePath);
    };
    /**
     * Update an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    OffersApi.prototype.update = function (offerDto, options) {
        return exports.OffersApiFp(this.configuration).update(offerDto, options)(this.axios, this.basePath);
    };
    return OffersApi;
}(base_1.BaseAPI));
exports.OffersApi = OffersApi;
/**
 * PersonasApi - axios parameter creator
 * @export
 */
exports.PersonasApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns the persona with the given ID
         * @param {string} id ID of the persona to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getById1.');
            }
            var localVarPath = "/persona/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Returns the contact infos of the persona with the given ID
         * @param {string} id ID of the persona to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactPoints1: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getContactPoints1.');
            }
            var localVarPath = "/persona/{id}/contact"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Persona searching
         * @param {UserSearch} userSearch Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search1: function (userSearch, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userSearch' is not null or undefined
            if (userSearch === null || userSearch === undefined) {
                throw new base_1.RequiredError('userSearch', 'Required parameter userSearch was null or undefined when calling search1.');
            }
            var localVarPath = "/persona/search";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof userSearch !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userSearch !== undefined ? userSearch : {}) : (userSearch || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * PersonasApi - functional programming interface
 * @export
 */
exports.PersonasApiFp = function (configuration) {
    return {
        /**
         * Returns the persona with the given ID
         * @param {string} id ID of the persona to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1: function (id, options) {
            var localVarAxiosArgs = exports.PersonasApiAxiosParamCreator(configuration).getById1(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the contact infos of the persona with the given ID
         * @param {string} id ID of the persona to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactPoints1: function (id, options) {
            var localVarAxiosArgs = exports.PersonasApiAxiosParamCreator(configuration).getContactPoints1(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Persona searching
         * @param {UserSearch} userSearch Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search1: function (userSearch, options) {
            var localVarAxiosArgs = exports.PersonasApiAxiosParamCreator(configuration).search1(userSearch, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * PersonasApi - factory interface
 * @export
 */
exports.PersonasApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns the persona with the given ID
         * @param {string} id ID of the persona to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1: function (id, options) {
            return exports.PersonasApiFp(configuration).getById1(id, options)(axios, basePath);
        },
        /**
         * Returns the contact infos of the persona with the given ID
         * @param {string} id ID of the persona to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactPoints1: function (id, options) {
            return exports.PersonasApiFp(configuration).getContactPoints1(id, options)(axios, basePath);
        },
        /**
         * Persona searching
         * @param {UserSearch} userSearch Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search1: function (userSearch, options) {
            return exports.PersonasApiFp(configuration).search1(userSearch, options)(axios, basePath);
        }
    };
};
/**
 * PersonasApi - object-oriented interface
 * @export
 * @class PersonasApi
 * @extends {BaseAPI}
 */
var PersonasApi = /** @class */ (function (_super) {
    __extends(PersonasApi, _super);
    function PersonasApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasApi
     */
    PersonasApi.prototype.getById1 = function (id, options) {
        return exports.PersonasApiFp(this.configuration).getById1(id, options)(this.axios, this.basePath);
    };
    /**
     * Returns the contact infos of the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasApi
     */
    PersonasApi.prototype.getContactPoints1 = function (id, options) {
        return exports.PersonasApiFp(this.configuration).getContactPoints1(id, options)(this.axios, this.basePath);
    };
    /**
     * Persona searching
     * @param {UserSearch} userSearch Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasApi
     */
    PersonasApi.prototype.search1 = function (userSearch, options) {
        return exports.PersonasApiFp(this.configuration).search1(userSearch, options)(this.axios, this.basePath);
    };
    return PersonasApi;
}(base_1.BaseAPI));
exports.PersonasApi = PersonasApi;
/**
 * TripsApi - axios parameter creator
 * @export
 */
exports.TripsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns the trip with the given ID
         * @param {string} id ID of the trip to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getById2.');
            }
            var localVarPath = "/trip/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Trip searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (searchDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'searchDto' is not null or undefined
            if (searchDto === null || searchDto === undefined) {
                throw new base_1.RequiredError('searchDto', 'Required parameter searchDto was null or undefined when calling search2.');
            }
            var localVarPath = "/trip/search";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof searchDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(searchDto !== undefined ? searchDto : {}) : (searchDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         * Minimal trip searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMinimal1: function (searchDto, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'searchDto' is not null or undefined
            if (searchDto === null || searchDto === undefined) {
                throw new base_1.RequiredError('searchDto', 'Required parameter searchDto was null or undefined when calling searchMinimal1.');
            }
            var localVarPath = "/trip/search/minimal";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof searchDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(searchDto !== undefined ? searchDto : {}) : (searchDto || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TripsApi - functional programming interface
 * @export
 */
exports.TripsApiFp = function (configuration) {
    return {
        /**
         * Returns the trip with the given ID
         * @param {string} id ID of the trip to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2: function (id, options) {
            var localVarAxiosArgs = exports.TripsApiAxiosParamCreator(configuration).getById2(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Trip searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (searchDto, options) {
            var localVarAxiosArgs = exports.TripsApiAxiosParamCreator(configuration).search2(searchDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Minimal trip searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMinimal1: function (searchDto, options) {
            var localVarAxiosArgs = exports.TripsApiAxiosParamCreator(configuration).searchMinimal1(searchDto, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TripsApi - factory interface
 * @export
 */
exports.TripsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns the trip with the given ID
         * @param {string} id ID of the trip to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2: function (id, options) {
            return exports.TripsApiFp(configuration).getById2(id, options)(axios, basePath);
        },
        /**
         * Trip searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (searchDto, options) {
            return exports.TripsApiFp(configuration).search2(searchDto, options)(axios, basePath);
        },
        /**
         * Minimal trip searching
         * @param {SearchDto} searchDto Search criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMinimal1: function (searchDto, options) {
            return exports.TripsApiFp(configuration).searchMinimal1(searchDto, options)(axios, basePath);
        }
    };
};
/**
 * TripsApi - object-oriented interface
 * @export
 * @class TripsApi
 * @extends {BaseAPI}
 */
var TripsApi = /** @class */ (function (_super) {
    __extends(TripsApi, _super);
    function TripsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the trip with the given ID
     * @param {string} id ID of the trip to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    TripsApi.prototype.getById2 = function (id, options) {
        return exports.TripsApiFp(this.configuration).getById2(id, options)(this.axios, this.basePath);
    };
    /**
     * Trip searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    TripsApi.prototype.search2 = function (searchDto, options) {
        return exports.TripsApiFp(this.configuration).search2(searchDto, options)(this.axios, this.basePath);
    };
    /**
     * Minimal trip searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    TripsApi.prototype.searchMinimal1 = function (searchDto, options) {
        return exports.TripsApiFp(this.configuration).searchMinimal1(searchDto, options)(this.axios, this.basePath);
    };
    return TripsApi;
}(base_1.BaseAPI));
exports.TripsApi = TripsApi;
