/**
 * Ride2Go API
 * Ride2Go Ridesharing API.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * represents a contact of a persona
 * @export
 * @interface ContactPointDto
 */
export interface ContactPointDto {
    /**
     * creation time of this object
     * @type {string}
     * @memberof ContactPointDto
     */
    created?: string;
    /**
     * last modification time of this object
     * @type {string}
     * @memberof ContactPointDto
     */
    modified?: string;
    /**
     * a flag, whether this object is deleted
     * @type {boolean}
     * @memberof ContactPointDto
     */
    deleted?: boolean;
    /**
     * id of creator
     * @type {string}
     * @memberof ContactPointDto
     */
    createdBy?: string;
    /**
     * id of modifier
     * @type {string}
     * @memberof ContactPointDto
     */
    modifiedBy?: string;
    /**
     * ID of this object
     * @type {string}
     * @memberof ContactPointDto
     */
    id?: string;
    /**
     * URL of this object
     * @type {string}
     * @memberof ContactPointDto
     */
    url?: string;
    /**
     * additional type information
     * @type {string}
     * @memberof ContactPointDto
     */
    additionalType?: string;
    /**
     * name of this object
     * @type {string}
     * @memberof ContactPointDto
     */
    name?: string;
    /**
     * an image of this object
     * @type {string}
     * @memberof ContactPointDto
     */
    image?: string;
    /**
     * description of this object
     * @type {string}
     * @memberof ContactPointDto
     */
    description?: string;
    /**
     * email
     * @type {string}
     * @memberof ContactPointDto
     */
    email?: string;
    /**
     * fax
     * @type {string}
     * @memberof ContactPointDto
     */
    faxnumber?: string;
    /**
     * telephone
     * @type {string}
     * @memberof ContactPointDto
     */
    telephone?: string;
}
/**
 * represents a trip demand
 * @export
 * @interface DemandDto
 */
export interface DemandDto {
    /**
     * creation time of this object
     * @type {string}
     * @memberof DemandDto
     */
    created?: string;
    /**
     * last modification time of this object
     * @type {string}
     * @memberof DemandDto
     */
    modified?: string;
    /**
     * a flag, whether this object is deleted
     * @type {boolean}
     * @memberof DemandDto
     */
    deleted?: boolean;
    /**
     * id of creator
     * @type {string}
     * @memberof DemandDto
     */
    createdBy?: string;
    /**
     * id of modifier
     * @type {string}
     * @memberof DemandDto
     */
    modifiedBy?: string;
    /**
     * ID of this object
     * @type {string}
     * @memberof DemandDto
     */
    id?: string;
    /**
     * URL of this object
     * @type {string}
     * @memberof DemandDto
     */
    url?: string;
    /**
     * additional type information
     * @type {string}
     * @memberof DemandDto
     */
    additionalType?: string;
    /**
     * name of this object
     * @type {string}
     * @memberof DemandDto
     */
    name?: string;
    /**
     * an image of this object
     * @type {string}
     * @memberof DemandDto
     */
    image?: string;
    /**
     * description of this object
     * @type {string}
     * @memberof DemandDto
     */
    description?: string;
    /**
     * availability of this trip
     * @type {string}
     * @memberof DemandDto
     */
    availability?: string;
    /**
     * start of the availability
     * @type {string}
     * @memberof DemandDto
     */
    availabilityStarts?: string;
    /**
     * end of the availability
     * @type {string}
     * @memberof DemandDto
     */
    availabilityEnds?: string;
    /**
     *
     * @type {TripDto}
     * @memberof DemandDto
     */
    subject?: TripDto;
    /**
     * price of the trip
     * @type {number}
     * @memberof DemandDto
     */
    price?: number;
    /**
     * currency of the price
     * @type {string}
     * @memberof DemandDto
     */
    priceCurrency?: string;
    /**
     *
     * @type {PersonaDto}
     * @memberof DemandDto
     */
    marketActor?: PersonaDto;
}
/**
 * represents a location with its coordinates
 * @export
 * @interface GeoLocation
 */
export interface GeoLocation {
    /**
     * latitude of the location
     * @type {number}
     * @memberof GeoLocation
     */
    latitude?: number;
    /**
     * longitude of the location
     * @type {number}
     * @memberof GeoLocation
     */
    longitude?: number;
}
/**
 * Represents a number range with integer boundaries. Both boundaries are optional and inclusive.
 * @export
 * @interface IntegerRange
 */
export interface IntegerRange {
    /**
     * lower boundary
     * @type {number}
     * @memberof IntegerRange
     */
    from?: number;
    /**
     * upper boundary
     * @type {number}
     * @memberof IntegerRange
     */
    to?: number;
}
/**
 * represents a trip offer
 * @export
 * @interface OfferDto
 */
export interface OfferDto {
    /**
     * creation time of this object
     * @type {string}
     * @memberof OfferDto
     */
    created?: string;
    /**
     * last modification time of this object
     * @type {string}
     * @memberof OfferDto
     */
    modified?: string;
    /**
     * a flag, whether this object is deleted
     * @type {boolean}
     * @memberof OfferDto
     */
    deleted?: boolean;
    /**
     * id of creator
     * @type {string}
     * @memberof OfferDto
     */
    createdBy?: string;
    /**
     * id of modifier
     * @type {string}
     * @memberof OfferDto
     */
    modifiedBy?: string;
    /**
     * ID of this object
     * @type {string}
     * @memberof OfferDto
     */
    id?: string;
    /**
     * URL of this object
     * @type {string}
     * @memberof OfferDto
     */
    url?: string;
    /**
     * additional type information
     * @type {string}
     * @memberof OfferDto
     */
    additionalType?: string;
    /**
     * name of this object
     * @type {string}
     * @memberof OfferDto
     */
    name?: string;
    /**
     * an image of this object
     * @type {string}
     * @memberof OfferDto
     */
    image?: string;
    /**
     * description of this object
     * @type {string}
     * @memberof OfferDto
     */
    description?: string;
    /**
     * availability of this trip
     * @type {string}
     * @memberof OfferDto
     */
    availability?: string;
    /**
     * start of the availability
     * @type {string}
     * @memberof OfferDto
     */
    availabilityStarts?: string;
    /**
     * end of the availability
     * @type {string}
     * @memberof OfferDto
     */
    availabilityEnds?: string;
    /**
     *
     * @type {TripDto}
     * @memberof OfferDto
     */
    subject?: TripDto;
    /**
     * price of the trip
     * @type {number}
     * @memberof OfferDto
     */
    price?: number;
    /**
     * currency of the price
     * @type {string}
     * @memberof OfferDto
     */
    priceCurrency?: string;
    /**
     *
     * @type {PersonaDto}
     * @memberof OfferDto
     */
    marketActor?: PersonaDto;
}
/**
 * holds a page
 * @export
 * @interface PageDemandDto
 */
export interface PageDemandDto {
    /**
     * list of the resulting elements
     * @type {Array<DemandDto>}
     * @memberof PageDemandDto
     */
    results?: Array<DemandDto>;
    /**
     *
     * @type {PageResponse}
     * @memberof PageDemandDto
     */
    page?: PageResponse;
}
/**
 * holds a page
 * @export
 * @interface PageOfferDto
 */
export interface PageOfferDto {
    /**
     * list of the resulting elements
     * @type {Array<OfferDto>}
     * @memberof PageOfferDto
     */
    results?: Array<OfferDto>;
    /**
     *
     * @type {PageResponse}
     * @memberof PageOfferDto
     */
    page?: PageResponse;
}
/**
 * pagination request
 * @export
 * @interface PageRequest
 */
export interface PageRequest {
    /**
     * size of the page
     * @type {number}
     * @memberof PageRequest
     */
    pageSize?: number;
    /**
     * index of the page (0 based)
     * @type {number}
     * @memberof PageRequest
     */
    page?: number;
    /**
     * this page\'s first element\'s index within the whole dataset
     * @type {number}
     * @memberof PageRequest
     */
    firstIndex?: number;
}
/**
 * holds information about a page
 * @export
 * @interface PageResponse
 */
export interface PageResponse {
    /**
     * size of the page
     * @type {number}
     * @memberof PageResponse
     */
    pageSize?: number;
    /**
     * index of the page (0 based)
     * @type {number}
     * @memberof PageResponse
     */
    page?: number;
    /**
     * number of total hits
     * @type {number}
     * @memberof PageResponse
     */
    totalCount?: number;
    /**
     * this page\'s last element\'s index within the whole dataset
     * @type {number}
     * @memberof PageResponse
     */
    lastIndex?: number;
    /**
     * is this the first of all pages
     * @type {boolean}
     * @memberof PageResponse
     */
    first?: boolean;
    /**
     * is this the last of all pages
     * @type {boolean}
     * @memberof PageResponse
     */
    last?: boolean;
    /**
     * this page\'s first element\'s index within the whole dataset
     * @type {number}
     * @memberof PageResponse
     */
    firstIndex?: number;
}
/**
 * holds a page
 * @export
 * @interface PageTripDto
 */
export interface PageTripDto {
    /**
     * list of the resulting elements
     * @type {Array<TripDto>}
     * @memberof PageTripDto
     */
    results?: Array<TripDto>;
    /**
     *
     * @type {PageResponse}
     * @memberof PageTripDto
     */
    page?: PageResponse;
}
/**
 * represents a trip participation
 * @export
 * @interface ParticipationDto
 */
export interface ParticipationDto {
    /**
     * creation time of this object
     * @type {string}
     * @memberof ParticipationDto
     */
    created?: string;
    /**
     * last modification time of this object
     * @type {string}
     * @memberof ParticipationDto
     */
    modified?: string;
    /**
     * a flag, whether this object is deleted
     * @type {boolean}
     * @memberof ParticipationDto
     */
    deleted?: boolean;
    /**
     * id of creator
     * @type {string}
     * @memberof ParticipationDto
     */
    createdBy?: string;
    /**
     * id of modifier
     * @type {string}
     * @memberof ParticipationDto
     */
    modifiedBy?: string;
    /**
     * ID of this object
     * @type {string}
     * @memberof ParticipationDto
     */
    id?: string;
    /**
     * URL of this object
     * @type {string}
     * @memberof ParticipationDto
     */
    url?: string;
    /**
     * additional type information
     * @type {string}
     * @memberof ParticipationDto
     */
    additionalType?: string;
    /**
     * name of this object
     * @type {string}
     * @memberof ParticipationDto
     */
    name?: string;
    /**
     * an image of this object
     * @type {string}
     * @memberof ParticipationDto
     */
    image?: string;
    /**
     * description of this object
     * @type {string}
     * @memberof ParticipationDto
     */
    description?: string;
    /**
     * role of the participant in this trip
     * @type {string}
     * @memberof ParticipationDto
     */
    role?: ParticipationDtoRoleEnum;
    /**
     * participation status
     * @type {string}
     * @memberof ParticipationDto
     */
    status?: ParticipationDtoStatusEnum;
    /**
     *
     * @type {PersonaDto}
     * @memberof ParticipationDto
     */
    participant?: PersonaDto;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ParticipationDtoRoleEnum {
    DRIVER = 0,
    OPERATOR = 1,
    PASSENGER = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum ParticipationDtoStatusEnum {
    ACCEPTED = 0,
    REQUESTED = 1,
    REJECTED = 2
}
/**
 * Represents a persona. A Persona is a Character or Profile a User chooses to adapt. In most cases this will be a Profile of a Human, however it can also be used as Profile for technical users/machines or Organisations.
 * @export
 * @interface PersonaDto
 */
export interface PersonaDto {
    /**
     * creation time of this object
     * @type {string}
     * @memberof PersonaDto
     */
    created?: string;
    /**
     * last modification time of this object
     * @type {string}
     * @memberof PersonaDto
     */
    modified?: string;
    /**
     * a flag, whether this object is deleted
     * @type {boolean}
     * @memberof PersonaDto
     */
    deleted?: boolean;
    /**
     * id of creator
     * @type {string}
     * @memberof PersonaDto
     */
    createdBy?: string;
    /**
     * id of modifier
     * @type {string}
     * @memberof PersonaDto
     */
    modifiedBy?: string;
    /**
     * ID of this object
     * @type {string}
     * @memberof PersonaDto
     */
    id?: string;
    /**
     * URL of this object
     * @type {string}
     * @memberof PersonaDto
     */
    url?: string;
    /**
     * additional type information
     * @type {string}
     * @memberof PersonaDto
     */
    additionalType?: string;
    /**
     * name of this object
     * @type {string}
     * @memberof PersonaDto
     */
    name?: string;
    /**
     * an image of this object
     * @type {string}
     * @memberof PersonaDto
     */
    image?: string;
    /**
     * description of this object
     * @type {string}
     * @memberof PersonaDto
     */
    description?: string;
    /**
     * additional name of the persona
     * @type {string}
     * @memberof PersonaDto
     */
    additionalName?: string;
    /**
     * femily name of the persona
     * @type {string}
     * @memberof PersonaDto
     */
    familyName?: string;
    /**
     * given name of the persona
     * @type {string}
     * @memberof PersonaDto
     */
    givenName?: string;
    /**
     * gender of the persona
     * @type {string}
     * @memberof PersonaDto
     */
    gender?: PersonaDtoGenderEnum;
    /**
     * contacts of the persona
     * @type {Array<ContactPointDto>}
     * @memberof PersonaDto
     */
    contactPoints?: Array<ContactPointDto>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum PersonaDtoGenderEnum {
    MAN = 0,
    WOMAN = 1,
    G = 2
}
/**
 * searching criteria, including pagination options
 * @export
 * @interface Search
 */
export interface Search {
    /**
     *
     * @type {PageRequest}
     * @memberof Search
     */
    page?: PageRequest;
    /**
     * what kind of trips to look for
     * @type {Array<string>}
     * @memberof Search
     */
    tripTypes?: Array<SearchTripTypesEnum>;
    /**
     *
     * @type {SearchRadius}
     * @memberof Search
     */
    startPoint?: SearchRadius;
    /**
     *
     * @type {SearchRadius}
     * @memberof Search
     */
    endPoint?: SearchRadius;
    /**
     *
     * @type {TimeRange}
     * @memberof Search
     */
    departure?: TimeRange;
    /**
     *
     * @type {TimeRange}
     * @memberof Search
     */
    arrival?: TimeRange;
    /**
     * on which days should the trip reoccur
     * @type {Array<string>}
     * @memberof Search
     */
    reoccurDays?: Array<SearchReoccurDaysEnum>;
    /**
     * is smoking allowed (irrelevant by default)
     * @type {string}
     * @memberof Search
     */
    smoking?: SearchSmokingEnum;
    /**
     * are animals allowed (irrelevant by default)
     * @type {string}
     * @memberof Search
     */
    animals?: SearchAnimalsEnum;
    /**
     * types of transport
     * @type {Array<string>}
     * @memberof Search
     */
    transportTypes?: Array<SearchTransportTypesEnum>;
    /**
     * size of allowed baggage
     * @type {string}
     * @memberof Search
     */
    baggage?: SearchBaggageEnum;
    /**
     * desired gender of the driver (irrelevant by default)
     * @type {string}
     * @memberof Search
     */
    gender?: SearchGenderEnum;
    /**
     * organization associatons
     * @type {Array<string>}
     * @memberof Search
     */
    organizations?: Array<SearchOrganizationsEnum>;
    /**
     * start of the availability of the trip
     * @type {string}
     * @memberof Search
     */
    availabilityStarts?: string;
    /**
     * end of the availability of the trip
     * @type {string}
     * @memberof Search
     */
    availabilityEnds?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchTripTypesEnum {
    OFFER = 0,
    SEARCH = 1
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchReoccurDaysEnum {
    MONDAY = 0,
    TUESDAY = 1,
    WEDNESDAY = 2,
    THURSDAY = 3,
    FRIDAY = 4,
    SATURDAY = 5,
    SUNDAY = 6
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchSmokingEnum {
    YES = 0,
    NO = 1,
    ASK = 2,
    IRRELEVANT = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchAnimalsEnum {
    YES = 0,
    NO = 1,
    ASK = 2,
    IRRELEVANT = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchTransportTypesEnum {
    CAR = 0,
    PLANE = 1,
    BOAT = 2,
    TRAIN = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchBaggageEnum {
    SMALL = 0,
    MEDIUM = 1,
    LARGE = 2,
    HUGE = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchGenderEnum {
    MAN = 0,
    WOMAN = 1,
    IRRELEVANT = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchOrganizationsEnum {
    ADAC = 0,
    ACA = 1,
    ACL = 2,
    TCS = 3,
    TOURING = 4
}
/**
 * searching criteria, including pagination options
 * @export
 * @interface SearchDto
 */
export interface SearchDto {
    /**
     *
     * @type {PageRequest}
     * @memberof SearchDto
     */
    page?: PageRequest;
    /**
     * what kind of trips to look for
     * @type {Array<string>}
     * @memberof SearchDto
     */
    tripTypes?: Array<SearchDtoTripTypesEnum>;
    /**
     *
     * @type {SearchRadius}
     * @memberof SearchDto
     */
    startPoint?: SearchRadius;
    /**
     *
     * @type {SearchRadius}
     * @memberof SearchDto
     */
    endPoint?: SearchRadius;
    /**
     *
     * @type {TimeRangeDto}
     * @memberof SearchDto
     */
    departure?: TimeRangeDto;
    /**
     *
     * @type {TimeRangeDto}
     * @memberof SearchDto
     */
    arrival?: TimeRangeDto;
    /**
     * on which days should the trip reoccur
     * @type {Array<string>}
     * @memberof SearchDto
     */
    reoccurDays?: Array<SearchDtoReoccurDaysEnum>;
    /**
     * is smoking allowed (irrelevant by default)
     * @type {string}
     * @memberof SearchDto
     */
    smoking?: SearchDtoSmokingEnum;
    /**
     * are animals allowed (irrelevant by default)
     * @type {string}
     * @memberof SearchDto
     */
    animals?: SearchDtoAnimalsEnum;
    /**
     * types of transport
     * @type {Array<string>}
     * @memberof SearchDto
     */
    transportTypes?: Array<SearchDtoTransportTypesEnum>;
    /**
     * size of allowed baggage
     * @type {string}
     * @memberof SearchDto
     */
    baggage?: SearchDtoBaggageEnum;
    /**
     * desired gender of the driver (irrelevant by default)
     * @type {string}
     * @memberof SearchDto
     */
    gender?: SearchDtoGenderEnum;
    /**
     * organization associatons
     * @type {Array<string>}
     * @memberof SearchDto
     */
    organizations?: Array<SearchDtoOrganizationsEnum>;
    /**
     * start of the availability of the trip
     * @type {string}
     * @memberof SearchDto
     */
    availabilityStarts?: string;
    /**
     * end of the availability of the trip
     * @type {string}
     * @memberof SearchDto
     */
    availabilityEnds?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchDtoTripTypesEnum {
    OFFER = 0,
    SEARCH = 1
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchDtoReoccurDaysEnum {
    MONDAY = 0,
    TUESDAY = 1,
    WEDNESDAY = 2,
    THURSDAY = 3,
    FRIDAY = 4,
    SATURDAY = 5,
    SUNDAY = 6
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchDtoSmokingEnum {
    YES = 0,
    NO = 1,
    ASK = 2,
    IRRELEVANT = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchDtoAnimalsEnum {
    YES = 0,
    NO = 1,
    ASK = 2,
    IRRELEVANT = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchDtoTransportTypesEnum {
    CAR = 0,
    PLANE = 1,
    BOAT = 2,
    TRAIN = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchDtoBaggageEnum {
    SMALL = 0,
    MEDIUM = 1,
    LARGE = 2,
    HUGE = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchDtoGenderEnum {
    MAN = 0,
    WOMAN = 1,
    IRRELEVANT = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchDtoOrganizationsEnum {
    ADAC = 0,
    ACA = 1,
    ACL = 2,
    TCS = 3,
    TOURING = 4
}
/**
 * represents a circular area
 * @export
 * @interface SearchRadius
 */
export interface SearchRadius {
    /**
     *
     * @type {GeoLocation}
     * @memberof SearchRadius
     */
    location?: GeoLocation;
    /**
     * area radius in kms
     * @type {number}
     * @memberof SearchRadius
     */
    radius?: number;
}
/**
 * represents a time range
 * @export
 * @interface TimeRange
 */
export interface TimeRange {
    /**
     * mean of the time range
     * @type {string}
     * @memberof TimeRange
     */
    time?: string;
    /**
     * duration between the mean and the ends of the time range
     * @type {number}
     * @memberof TimeRange
     */
    toleranceInDays?: number;
}
/**
 * represents a time range
 * @export
 * @interface TimeRangeDto
 */
export interface TimeRangeDto {
    /**
     * mean of the time range
     * @type {string}
     * @memberof TimeRangeDto
     */
    time?: string;
    /**
     * duration between the mean and the ends of the time range
     * @type {number}
     * @memberof TimeRangeDto
     */
    toleranceInDays?: number;
}
/**
 * represents transport information of a trip
 * @export
 * @interface TransportDto
 */
export interface TransportDto {
    /**
     * creation time of this object
     * @type {string}
     * @memberof TransportDto
     */
    created?: string;
    /**
     * last modification time of this object
     * @type {string}
     * @memberof TransportDto
     */
    modified?: string;
    /**
     * a flag, whether this object is deleted
     * @type {boolean}
     * @memberof TransportDto
     */
    deleted?: boolean;
    /**
     * id of creator
     * @type {string}
     * @memberof TransportDto
     */
    createdBy?: string;
    /**
     * id of modifier
     * @type {string}
     * @memberof TransportDto
     */
    modifiedBy?: string;
    /**
     * ID of this object
     * @type {string}
     * @memberof TransportDto
     */
    id?: string;
    /**
     * URL of this object
     * @type {string}
     * @memberof TransportDto
     */
    url?: string;
    /**
     * additional type information
     * @type {string}
     * @memberof TransportDto
     */
    additionalType?: string;
    /**
     * name of this object
     * @type {string}
     * @memberof TransportDto
     */
    name?: string;
    /**
     * an image of this object
     * @type {string}
     * @memberof TransportDto
     */
    image?: string;
    /**
     * description of this object
     * @type {string}
     * @memberof TransportDto
     */
    description?: string;
    /**
     * type of vehicle
     * @type {string}
     * @memberof TransportDto
     */
    transportType?: TransportDtoTransportTypeEnum;
    /**
     * maximum number of seats (including driver)
     * @type {number}
     * @memberof TransportDto
     */
    seatingCapacity?: number;
    /**
     * how many baggage can be transported
     * @type {string}
     * @memberof TransportDto
     */
    cargoVolume?: TransportDtoCargoVolumeEnum;
    /**
     *
     * @type {PersonaDto}
     * @memberof TransportDto
     */
    owner?: PersonaDto;
    /**
     *
     * @type {PersonaDto}
     * @memberof TransportDto
     */
    operator?: PersonaDto;
    /**
     * color of the vehicle
     * @type {string}
     * @memberof TransportDto
     */
    color?: string;
    /**
     * manufacturer of the vehicle
     * @type {string}
     * @memberof TransportDto
     */
    manufacturer?: string;
    /**
     * model of the vehicle
     * @type {string}
     * @memberof TransportDto
     */
    model?: string;
    /**
     * release date of the vehicle model (things like \"fall 2019\" are valid)
     * @type {string}
     * @memberof TransportDto
     */
    modelDate?: string;
    /**
     * registration ID of the vehicle
     * @type {string}
     * @memberof TransportDto
     */
    registrationId?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TransportDtoTransportTypeEnum {
    CAR = 0,
    PLANE = 1,
    BOAT = 2,
    TRAIN = 3
}
/**
    * @export
    * @enum {string}
    */
export declare enum TransportDtoCargoVolumeEnum {
    SMALL = 0,
    MEDIUM = 1,
    LARGE = 2,
    HUGE = 3
}
/**
 * represents a trip
 * @export
 * @interface TripDto
 */
export interface TripDto {
    /**
     * creation time of this object
     * @type {string}
     * @memberof TripDto
     */
    created?: string;
    /**
     * last modification time of this object
     * @type {string}
     * @memberof TripDto
     */
    modified?: string;
    /**
     * a flag, whether this object is deleted
     * @type {boolean}
     * @memberof TripDto
     */
    deleted?: boolean;
    /**
     * id of creator
     * @type {string}
     * @memberof TripDto
     */
    createdBy?: string;
    /**
     * id of modifier
     * @type {string}
     * @memberof TripDto
     */
    modifiedBy?: string;
    /**
     * ID of this object
     * @type {string}
     * @memberof TripDto
     */
    id?: string;
    /**
     * URL of this object
     * @type {string}
     * @memberof TripDto
     */
    url?: string;
    /**
     * additional type information
     * @type {string}
     * @memberof TripDto
     */
    additionalType?: string;
    /**
     * name of this object
     * @type {string}
     * @memberof TripDto
     */
    name?: string;
    /**
     * an image of this object
     * @type {string}
     * @memberof TripDto
     */
    image?: string;
    /**
     * description of this object
     * @type {string}
     * @memberof TripDto
     */
    description?: string;
    /**
     * departure time of the trip
     * @type {string}
     * @memberof TripDto
     */
    departureTime?: string;
    /**
     * arrival time of the trip
     * @type {string}
     * @memberof TripDto
     */
    arrivalTime?: string;
    /**
     *
     * @type {TransportDto}
     * @memberof TripDto
     */
    transport?: TransportDto;
    /**
     * participants
     * @type {Array<ParticipationDto>}
     * @memberof TripDto
     */
    participations?: Array<ParticipationDto>;
    /**
     * the seats currently available to this trip. at most Transport.seatingCapacity -1 (driver)
     * @type {number}
     * @memberof TripDto
     */
    availableSeats?: number;
    /**
     *
     * @type {OfferDto}
     * @memberof TripDto
     */
    offer?: OfferDto;
    /**
     *
     * @type {DemandDto}
     * @memberof TripDto
     */
    demand?: DemandDto;
    /**
     * smoking preferences of the trip
     * @type {string}
     * @memberof TripDto
     */
    smoking?: TripDtoSmokingEnum;
    /**
     * animal transport preferences of the trip
     * @type {string}
     * @memberof TripDto
     */
    animals?: TripDtoAnimalsEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TripDtoSmokingEnum {
    YES = 0,
    NO = 1,
    FLEX = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum TripDtoAnimalsEnum {
    YES = 0,
    NO = 1,
    ASK = 2
}
/**
 * searching criteria, including pagination options
 * @export
 * @interface UserSearch
 */
export interface UserSearch {
    /**
     *
     * @type {PageRequest}
     * @memberof UserSearch
     */
    page?: PageRequest;
    /**
     *
     * @type {SearchRadius}
     * @memberof UserSearch
     */
    location?: SearchRadius;
    /**
     *
     * @type {IntegerRange}
     * @memberof UserSearch
     */
    age?: IntegerRange;
    /**
     * gender of the persona
     * @type {string}
     * @memberof UserSearch
     */
    gender?: UserSearchGenderEnum;
    /**
     * whether the persona should be single
     * @type {string}
     * @memberof UserSearch
     */
    isSingle?: UserSearchIsSingleEnum;
    /**
     * whether the persona should have an avatar picture
     * @type {string}
     * @memberof UserSearch
     */
    hasAvatar?: UserSearchHasAvatarEnum;
    /**
     * whether the persona should be online
     * @type {string}
     * @memberof UserSearch
     */
    isOnline?: UserSearchIsOnlineEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum UserSearchGenderEnum {
    MAN = 0,
    WOMAN = 1,
    IRRELEVANT = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum UserSearchIsSingleEnum {
    YES = 0,
    NO = 1,
    IRRELEVANT = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum UserSearchHasAvatarEnum {
    YES = 0,
    NO = 1,
    IRRELEVANT = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum UserSearchIsOnlineEnum {
    YES = 0,
    NO = 1,
    IRRELEVANT = 2
}
/**
 * DemandsApi - axios parameter creator
 * @export
 */
export declare const DemandsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(demandDto: DemandDto, options?: any): RequestArgs;
    /**
     * Create an Deman
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(demandDto: DemandDto, options?: any): RequestArgs;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById(id: string, options?: any): RequestArgs;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): RequestArgs;
    /**
     * Demand searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(searchDto: SearchDto, options?: any): RequestArgs;
    /**
     * Update an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(demandDto: DemandDto, options?: any): RequestArgs;
};
/**
 * DemandsApi - functional programming interface
 * @export
 */
export declare const DemandsApiFp: (configuration?: Configuration) => {
    /**
     * Delete an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(demandDto: DemandDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DemandDto>;
    /**
     * Create an Deman
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(demandDto: DemandDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DemandDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DemandDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DemandDto>;
    /**
     * Demand searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(searchDto: SearchDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDemandDto>;
    /**
     * Update an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(demandDto: DemandDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DemandDto>;
};
/**
 * DemandsApi - factory interface
 * @export
 */
export declare const DemandsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(demandDto: DemandDto, options?: any): AxiosPromise<DemandDto>;
    /**
     * Create an Deman
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(demandDto: DemandDto, options?: any): AxiosPromise<DemandDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById(id: string, options?: any): AxiosPromise<DemandDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): AxiosPromise<DemandDto>;
    /**
     * Demand searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(searchDto: SearchDto, options?: any): AxiosPromise<PageDemandDto>;
    /**
     * Update an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(demandDto: DemandDto, options?: any): AxiosPromise<DemandDto>;
};
/**
 * DemandsApi - object-oriented interface
 * @export
 * @class DemandsApi
 * @extends {BaseAPI}
 */
export declare class DemandsApi extends BaseAPI {
    /**
     * Delete an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    _delete(demandDto: DemandDto, options?: any): AxiosPromise<DemandDto>;
    /**
     * Create an Deman
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    create(demandDto: DemandDto, options?: any): AxiosPromise<DemandDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    deleteById(id: string, options?: any): AxiosPromise<DemandDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    getById(id: string, options?: any): AxiosPromise<DemandDto>;
    /**
     * Demand searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    search(searchDto: SearchDto, options?: any): AxiosPromise<PageDemandDto>;
    /**
     * Update an Offer
     * @param {DemandDto} demandDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemandsApi
     */
    update(demandDto: DemandDto, options?: any): AxiosPromise<DemandDto>;
}
/**
 * OffersApi - axios parameter creator
 * @export
 */
export declare const OffersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(offerDto: OfferDto, options?: any): RequestArgs;
    /**
     * Delete an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(offerDto: OfferDto, options?: any): RequestArgs;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById1(id: string, options?: any): RequestArgs;
    /**
     * Returns the offer with the given ID
     * @param {string} id ID of the offer to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById1(id: string, options?: any): RequestArgs;
    /**
     * Offer searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search1(searchDto: SearchDto, options?: any): RequestArgs;
    /**
     * Update an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(offerDto: OfferDto, options?: any): RequestArgs;
};
/**
 * OffersApi - functional programming interface
 * @export
 */
export declare const OffersApiFp: (configuration?: Configuration) => {
    /**
     * Create an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(offerDto: OfferDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>;
    /**
     * Delete an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(offerDto: OfferDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById1(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>;
    /**
     * Returns the offer with the given ID
     * @param {string} id ID of the offer to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById1(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>;
    /**
     * Offer searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search1(searchDto: SearchDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfferDto>;
    /**
     * Update an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(offerDto: OfferDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>;
};
/**
 * OffersApi - factory interface
 * @export
 */
export declare const OffersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto>;
    /**
     * Delete an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById1(id: string, options?: any): AxiosPromise<OfferDto>;
    /**
     * Returns the offer with the given ID
     * @param {string} id ID of the offer to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById1(id: string, options?: any): AxiosPromise<OfferDto>;
    /**
     * Offer searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search1(searchDto: SearchDto, options?: any): AxiosPromise<PageOfferDto>;
    /**
     * Update an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto>;
};
/**
 * OffersApi - object-oriented interface
 * @export
 * @class OffersApi
 * @extends {BaseAPI}
 */
export declare class OffersApi extends BaseAPI {
    /**
     * Create an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    create1(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto>;
    /**
     * Delete an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    delete1(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto>;
    /**
     * Returns the demand with the given ID
     * @param {string} id ID of the demand to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    deleteById1(id: string, options?: any): AxiosPromise<OfferDto>;
    /**
     * Returns the offer with the given ID
     * @param {string} id ID of the offer to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    getById1(id: string, options?: any): AxiosPromise<OfferDto>;
    /**
     * Offer searching
     * @param {SearchDto} searchDto Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    search1(searchDto: SearchDto, options?: any): AxiosPromise<PageOfferDto>;
    /**
     * Update an Offer
     * @param {OfferDto} offerDto Offer Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    update1(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto>;
}
/**
 * PersonasApi - axios parameter creator
 * @export
 */
export declare const PersonasApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById2(id: string, options?: any): RequestArgs;
    /**
     * Returns the contact infos of the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactPoints(id: string, options?: any): RequestArgs;
    /**
     * Persona searching
     * @param {UserSearch} userSearch Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search2(userSearch: UserSearch, options?: any): RequestArgs;
};
/**
 * PersonasApi - functional programming interface
 * @export
 */
export declare const PersonasApiFp: (configuration?: Configuration) => {
    /**
     * Returns the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById2(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Returns the contact infos of the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactPoints(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Persona searching
     * @param {UserSearch} userSearch Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search2(userSearch: UserSearch, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * PersonasApi - factory interface
 * @export
 */
export declare const PersonasApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById2(id: string, options?: any): AxiosPromise<void>;
    /**
     * Returns the contact infos of the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactPoints(id: string, options?: any): AxiosPromise<void>;
    /**
     * Persona searching
     * @param {UserSearch} userSearch Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search2(userSearch: UserSearch, options?: any): AxiosPromise<void>;
};
/**
 * PersonasApi - object-oriented interface
 * @export
 * @class PersonasApi
 * @extends {BaseAPI}
 */
export declare class PersonasApi extends BaseAPI {
    /**
     * Returns the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasApi
     */
    getById2(id: string, options?: any): AxiosPromise<void>;
    /**
     * Returns the contact infos of the persona with the given ID
     * @param {string} id ID of the persona to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasApi
     */
    getContactPoints(id: string, options?: any): AxiosPromise<void>;
    /**
     * Persona searching
     * @param {UserSearch} userSearch Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasApi
     */
    search2(userSearch: UserSearch, options?: any): AxiosPromise<void>;
}
/**
 * TripsApi - axios parameter creator
 * @export
 */
export declare const TripsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns the trip with the given ID
     * @param {string} id ID of the trip to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById3(id: string, options?: any): RequestArgs;
    /**
     * Trip searching
     * @param {Search} search Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search3(search: Search, options?: any): RequestArgs;
    /**
     * Minimal trip searching
     * @param {Search} search Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMinimal(search: Search, options?: any): RequestArgs;
};
/**
 * TripsApi - functional programming interface
 * @export
 */
export declare const TripsApiFp: (configuration?: Configuration) => {
    /**
     * Returns the trip with the given ID
     * @param {string} id ID of the trip to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById3(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripDto>;
    /**
     * Trip searching
     * @param {Search} search Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search3(search: Search, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTripDto>;
    /**
     * Minimal trip searching
     * @param {Search} search Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMinimal(search: Search, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * TripsApi - factory interface
 * @export
 */
export declare const TripsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns the trip with the given ID
     * @param {string} id ID of the trip to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById3(id: string, options?: any): AxiosPromise<TripDto>;
    /**
     * Trip searching
     * @param {Search} search Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search3(search: Search, options?: any): AxiosPromise<PageTripDto>;
    /**
     * Minimal trip searching
     * @param {Search} search Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMinimal(search: Search, options?: any): AxiosPromise<void>;
};
/**
 * TripsApi - object-oriented interface
 * @export
 * @class TripsApi
 * @extends {BaseAPI}
 */
export declare class TripsApi extends BaseAPI {
    /**
     * Returns the trip with the given ID
     * @param {string} id ID of the trip to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    getById3(id: string, options?: any): AxiosPromise<TripDto>;
    /**
     * Trip searching
     * @param {Search} search Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    search3(search: Search, options?: any): AxiosPromise<PageTripDto>;
    /**
     * Minimal trip searching
     * @param {Search} search Search criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    searchMinimal(search: Search, options?: any): AxiosPromise<void>;
}
